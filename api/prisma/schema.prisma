generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DB_URL")
}

enum Language {
    FR
    EN
    DE
    ES
    BRPT
    IT

    @@map("language")
}

enum GameMode {
    REGULAR
    EASY
    BLITZ
    SUB500
    SUB50
    FREEPLAY

    @@map("game_mode")
}

enum SubmitResultType {
    SUCCESS
    FAILS_PROMPT
    INVALID_WORD
    NO_TEXT
    ALREADY_USED
    BOMB_EXPLODED

    @@map("submit_result_type")
}

model PlayerUsername {
    id String @id @default(uuid()) @db.Uuid

    player_id String @db.Uuid

    username   String   @db.VarChar(50)
    created_at DateTime @default(now())

    player Player @relation(fields: [player_id], references: [id])

    @@map("player_username")
}

model Player {
    id         String   @id @default(uuid()) @db.Uuid
    created_at DateTime @default(now())

    account_name String
    xp           Int    @default(0)

    metadata Json @default("{}")

    words        Word[]
    usernames    PlayerUsername[]
    gameRecaps   GameRecap[]
    websiteUsers WebsiteUserToPlayer[]

    @@map("player")
}

model Game {
    id         String    @id @default(uuid()) @db.Uuid
    started_at DateTime  @default(now())
    ended_at   DateTime?

    language   Language
    mode       GameMode
    words      Word[]
    gameRecaps GameRecap[]

    @@map("game")
}

model GameRecap {
    id String @id @default(uuid()) @db.Uuid

    game_id   String @db.Uuid
    player_id String @db.Uuid

    died_at                          DateTime
    words_count                      Int
    flips_count                      Int
    depleted_syllables_count         Int
    alpha_count                      Int
    words_without_death_count        Int
    previous_syllables_count         Int
    multi_syllables_count            Int
    hyphen_words_count               Int
    more_than_20_letters_words_count Int

    slurs_count     Int @default(0)
    creatures_count Int @default(0)
    ethnonyms_count Int @default(0)
    chemicals_count Int @default(0)
    plants_count    Int @default(0)
    adverbs_count   Int @default(0)
    foods_count     Int @default(0)

    game   Game   @relation(fields: [game_id], references: [id])
    player Player @relation(fields: [player_id], references: [id])

    @@map("game_recap")
}

model Word {
    id         String   @id @default(uuid()) @db.Uuid
    created_at DateTime @default(now())

    player_id String @db.Uuid
    game_id   String @db.Uuid

    word          String           @db.VarChar(50)
    flip          Boolean
    submit_result SubmitResultType
    prompt        String           @db.VarChar(10)

    player Player @relation(fields: [player_id], references: [id])
    game   Game   @relation(fields: [game_id], references: [id])

    @@map("word")
}

model WebsiteSession {
    id String @id @default(uuid()) @db.Uuid

    session_token   String @unique
    website_user_id String @db.Uuid

    user WebsiteUser @relation(fields: [website_user_id], references: [id])

    @@map("website_session")
}

model WebsiteUser {
    id String @id @default(uuid()) @db.Uuid

    oauth_identifier  String @unique
    oauth_username    String
    oauth_global_name String
    oauth_avatar      String
    oauth_provider    String

    WebsiteSession           WebsiteSession[]
    WebsiteUserToPlayer      WebsiteUserToPlayer?
    WebsiteUserToPlayerToken WebsiteUserToPlayerToken?

    @@map("website_user")
}

model WebsiteUserToPlayer {
    player_id       String @unique @db.Uuid
    website_user_id String @unique @db.Uuid

    player       Player      @relation(fields: [player_id], references: [id])
    website_user WebsiteUser @relation(fields: [website_user_id], references: [id])

    @@map("website_user_to_player")
}

model WebsiteUserToPlayerToken {
    id String @id @default(uuid()) @db.Uuid

    token           String @unique
    website_user_id String @unique @db.Uuid

    website_user WebsiteUser @relation(fields: [website_user_id], references: [id])

    @@map("website_user_to_player_token")
}
