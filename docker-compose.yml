services:
    website:
        build:
            context: ./website
            target: production
        ports:
            - "3000:3000"
        environment:
            API_URL: ${API_URL}
            API_KEY: ${API_KEY}
            DISCORD_REDIRECT_URI: ${DISCORD_REDIRECT_URI}
            DISCORD_CLIENT_ID: ${DISCORD_CLIENT_ID}
            EXPERIMENTAL_FEATURES_ENABLED: ${WEBSITE_EXPERIMENTAL_FEATURES_ENABLED}
        depends_on:
            api:
                condition: service_healthy
    bot:
        build:
            context: ./bot
            target: production
        depends_on:
            api:
                condition: service_healthy
        environment:
            API_URL: ${API_URL}
            API_KEY: ${API_KEY}
            USERNAME: ${CROCO_USERNAME}
            PASSWORD: ${CROCO_PASSWORD}
            NAMESPACE_UUID: ${NAMESPACE_UUID}
    api:
        build:
            context: ./api
        depends_on:
            db:
                condition: service_healthy
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
            interval: 1s
            timeout: 2s
            retries: 20
        environment:
            ENVIRONMENT: production
            DB_URL: ${DB_URL}
            API_KEY: ${API_KEY}
            DISCORD_REDIRECT_URI: ${DISCORD_REDIRECT_URI}
            DISCORD_CLIENT_ID: ${DISCORD_CLIENT_ID}
            DISCORD_CLIENT_SECRET: ${DISCORD_CLIENT_SECRET}
    db:
        image: postgres:13.18-alpine3.20
        volumes:
            - db_data:/var/lib/postgresql/data
        healthcheck:
            test:
                [
                    "CMD-SHELL",
                    "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}",
                ]
            interval: 1s
            timeout: 2s
            retries: 20
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_DB: ${POSTGRES_DB}

volumes:
    db_data:
